SQL is used in RDBMS

//timestamp: 2:56

In a relational database, data is stored in
multiple tables. Different tables are related to
certain columns of other tables, forming a relation.

There are five types of SQL commands.
DDL - Data definition langauge
(Create, drop, alter, truncate)

DML - Data manipulation langauge
(Insert, update, delete, merge)

DCL - Data control langauge
(grant, revoke)

TCL - Transaction control langauge
(commit, rollback, savepoint)

DQL - Data query langauge
(select)

Let's look at each of them in detail.




1. DDL
The syntax to CREATE a table can be like this:

CREATE TABLE table_name
(
  column1   DATA_TYPE
  column2   DATA_TYPE CONSTRAINT
  CONSTRAINT  constraint_name...
)

# each column is associated to a data type and optionally a constraint.

Here is an actual example of a table being created:

CREATE TABLE STUDENTS
(
  ID   VARCHAR(20) PRIMARY KEY
 ,FIRST_NAME VARCHAR(100) NOT NULL
 ,LAST_NAME VARCHAR(100) NOT NULL
 ,GENDER VARCHAR(10) CHECK (GENDER IN ('M', 'F', 'Male', 'Female'))
 ,AGE INT
 ,DOB DATE
 ,GRADE FLOAT
 ,IS_ACTIVE BOOLEAN
 ,CONSTRAINT CH_STUDENTS_AGE CHECK (AGE > 0)
)

//timestamp: 4:42

VARCHAR can store numbers, special characters, and letters.
The rest are self explanatory.

1b. Types of CONSTRAINTS

CHECK - Helps control the values being inserted
NOT NULL - Helps ensure the column values are never NULL
UNIQUE - helps ensure the column values are always unique. Multiple
nulls in these columns are allowed. Two nulls are not the same.

//timestamp: 7:20

PRIMARY KEY - ensures all values in column are unique with no NULL values.
FOREIGN KEY - parent/child relationship between tables. Child table references
values from parent table.
DROP - deletes stuff
ALTER - alters stuff. Examples:
ALTER TABLE table_name DROP COLUMN column_name
ALTER TABLE table_name RENAME TO New_table_name
ALTER TABLE table_name RENAME COLUMN column_name TO New_column_name



2. DML
//timestamp: 9:03
INSERT Examples:
INSERT INTO table_name (column1, col2, col3)
VALUES ('val1', 'val2', 'val3')

Listing the column names aren't mandatory, I think inserting values
starts from the leftmost column and goes to the right.

INSERT INTO table_name VALUES
('row1-value1', 'row1-value2'), ('row2-value1', 'row2-value2')
//timestamp 9:17

UPDATE examples:
UPDATE table_name
SET column1 = 'new value'
WHERE column2 = 'new value';

DELETE examples:
DELETE FROM table_name WHERE column1 = 'value';
If you want to delete the whole table, don't include the WHERE.

Let's type some of this into pgAdmin!
//timestamp: 10:16

//timestamp: 10:19

CREATE TABLE STAFF
(
	STAFF_ID		VARCHAR(20)
	,STAFF_TYPE		VARCHAR(30)
	,SCHOOL_ID		VARCHAR(20)
	,FIRST_NAME		VARCHAR(100) NOT NULL
	,LAST_NAME		VARCHAR(100) NOT NULL
	,AGE		VARCHAR(20)
	,DOB		VARCHAR(20)
	,GENDER		VARCHAR(20)
	,JOIN_DATE		DATE
	,ADDRESS_ID		VARCHAR(20)
	,CONSTRAINT PK_STF PRIMARY KEY(STAFF_ID)
	,CONSTRAINT FK_STAFF_SCHL FOREIGN KEY(SCHOOL_ID) REFERENCES SCHOOL(SCHOOL_ID)
	,CONSTRAINT FK_STAFF_ADDR FOREIGN KEY(ADDRESS_ID) REFERENCES ADDRESS(ADDRESS_ID)
);

SELECT * FROM ADDRESS;
SELECT * FROM SCHOOL;
SELECT * FROM STAFF;


The table should not have any data in it yet.

INSERT INTO STAFF (STAFF_ID, STAFF_TYPE, SCHOOL_ID, FIRST_NAME, LAST_NAME, AGE, DOB, GENDER, JOIN_DATE, ADDRESS_ID) VALUES
('STF2004', 'Non-teaching', 'SCHL1001', 'Shamala', 'Devi', '56', TO_DATE('03/09/1964', 'DD/MM/YYYY'), 'F', TO_DATE('05/06/2015', 'DD/MM/YYYY'), '222 Yes road')


//timestamp: 11:40

Putting COMMIT after this doesn't work for some reason.

If we try to execute an INSERT INTO statement into the STAFF table with
a duplicate STAFF_ID value, the CONSTRAINT we set before won't allow it.

We aren't able to put NULL values into the first and last name columns.

//timestamp: 13:21

The foreign key column means that we can only put values into the STAFF table
that already exist within the SCHOOL and ADDRESS tables.

CREATE TABLE ADDRESS
(
  ADDRESS_ID  VARCHAR(20)
  ,STREET  VARCHAR(250)
  ,CITY  VARCHAR(100)
  ,STATE  VARCHAR(100)
  ,COUNTRY  VARCHAR(100)
)




Let's checkout some more DDL commands..

//timestamp: 14:29

To delete a table, all you need to type is...
DROP TABLE STAFF.

To get rid of the staff table.

If we want to 'alter' a table, we can do so in many ways...

ALTER TABLE STAFF DROP COLUMN JOIN_DATE   # This drops a column in a table.
ALTER TABLE STAFF ALTER COLUMN AGE TYPE VARCHAR(5)  # This changes the data type of age. It was INT b4.
ALTER TABLE STAFF RENAME TO STAFF_NEW   # This renames a table.
ALTER TABLE STAFF RENAME COLUMN FIRST_NAME TO FULL_NAME   # This renames a column within a table.
ALTER TABLE STAFF ADD CONSTRAINT UNQ_STF UNIQUE (STAFF_TYPE) # This adds a constraint of unique to one of our columns.

//timestamp: 17:06

Let's checkout some DML commands...

We can insert values into a table with these two syntaxes...

INSERT INTO ADDRESS (ADDRESS_ID, STREET, CITY, STATE, COUNTRY)
VALUES ('ADR1011', '222 blueberry st', 'new york', 'new york', 'USA')

--or--

INSERT INTO ADDRESS
VALUES ('ADR1011', '222 blueberry st', 'new york', 'new york', 'USA')

Both of these will work. You don't need to specify the columns since they
get inserted into the table left to right.

INSERT INTO ADDRESS VALUES
('ADR1102', '223 yes st', 'cinninati', 'ohio', 'USA'),
('ADR1103', '333 wtf st', 'indianapolis', 'indiana', 'USA')

Here, we can insert multiple full entires, separated by parenthesis and commas.

If we want to update any values in the table....

//timestamp: 19:08
Open pgAdmin

# To update a specific column value in the table.
UPDATE ADDRESS
SET COUNTRY = "Malaysia'
WHERE ADDRESS_ID = 'ADR1003'
//timestamp: 19:24